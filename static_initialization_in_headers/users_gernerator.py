import glob, os

def generate_cpp_and_h(number):
    with open(f'User{number}.cpp', 'w') as f:
        cpp = f"""// THIS FILE WAS GENERATED BY users_generator.py
#include "User{number}.h"
#include "info_data.h"

std::string User{number}::get() const""" + """ {
    return getvalues(EType::EType1) + getvalues(EType::EType2) + getvalues(EType::EType3);
}
"""
        f.write(cpp)
    with open(f'User{number}.h', 'w') as f:
        hpp = f"""// THIS FILE WAS GENERATED BY users_generator.py
#pragma once
#include <string>

class User{number}""" +""" {
public:
    std::string get() const;
};
"""
        f.write(hpp)

def generate_cmakelists(num_of_users):
    with open(f'CMakeLists.txt', 'w') as f:
        users = ""
        for i in range(1, num_of_users):
            users += f"User{i}.cpp\n"
        cmake = """# THIS FILE WAS GENERATED BY users_generator.py
cmake_minimum_required(VERSION 3.22)
project(static_initialization_in_headers)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb -O0")
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
set(users
""" + users + """
        )
add_executable(static_initialization_in_headers main.cpp info_data.cpp ${users})
"""
        f.write(cmake)

def generate_main(num_of_users):
    with open('main.cpp', 'w') as f:
        includes = "#include <iostream>\n"
        for i in range(1, num_of_users):
            includes += f"#include <User{i}.h>\n"

        calls = "\n"
        for i in range(1, num_of_users):
            calls += f"    std::cout << User{i}().get() << std::endl;\n"

        content = includes + """
int main() {""" + calls +"""
    return 0;
}
"""
        f.write(content)


if __name__ == '__main__':

    for f in glob.glob("User*"):
        os.remove(f)
    num_of_users = 2
    for i in range(1, num_of_users+1):
        generate_cpp_and_h(i)
    generate_main(num_of_users+1)
    generate_cmakelists(num_of_users+1)

